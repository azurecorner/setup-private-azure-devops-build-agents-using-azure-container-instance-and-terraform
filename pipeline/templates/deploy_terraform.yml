parameters:
- name: serviceConnectionName
- name: backendAzureRmResourceGroupName
- name: backendAzureRmStorageAccountName
- name: backendResourceContainerName
- name: workspace
- name: stageName
- name: VARS
stages:
- stage: deploy_to_${{ parameters.stageName }}_environment 
  displayName: deploy  to ${{ parameters.stageName }} environment
  jobs:
  - deployment: DeployTerraform
    displayName: deploy 
    pool:
      vmImage: ubuntu-latest
    # creates an environment if it doesn't exist
    environment: ${{ parameters.workspace }}
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: TerraformInstaller@0
            displayName: Install Terraform 1.5.2
            inputs:
              terraformVersion: '1.5.2'
          - task: TerraformTaskV2@2
            displayName: Initialyze terraform 
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              commandOptions: ' ${{ parameters.VARS }} '
              backendServiceArm: '${{  parameters.serviceConnectionName }}'
              backendAzureRmResourceGroupName: '${{  parameters.backendAzureRmResourceGroupName }}'
              backendAzureRmStorageAccountName: '${{  parameters.backendAzureRmStorageAccountName }}'
              backendAzureRmContainerName: '${{  parameters.backendResourceContainerName }}'
              backendAzureRmKey: 'terraform.tfstate'
        
          - task: TerraformTaskV2@2
            displayName: Plan Terraform
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              commandOptions: ' ${{ parameters.VARS }} '
              environmentServiceNameAzureRM: '${{  parameters.serviceConnectionName }}'
          
          - task: PowerShell@2
              inputs:
              targetType: 'inline'
              script: 'terraform show -json tfplan >> tfplan.json'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
         
          - task: TerraformTaskV2@2
            name: terraformApply
            displayName: Apply Terraform
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              commandOptions: ' ${{ parameters.VARS }} '
              environmentServiceNameAzureRM: '${{  parameters.serviceConnectionName }}'